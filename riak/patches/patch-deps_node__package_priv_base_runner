$NetBSD$

Warn against non-SMF usage, increase file descriptors.
--- deps/node_package/priv/base/runner.orig	Tue Jul  9 22:00:35 2013
+++ deps/node_package/priv/base/runner	Fri Jul 19 13:12:19 2013
@@ -52,9 +52,16 @@
 # Check the first argument for instructions
 case "$1" in
     start)
+
         # Bootstrap daemon command (check perms & drop to $RUNNER_USER)
         bootstrapd $@
 
+        if [ "${SMF_METHOD}" != "start" ]; then
+            echo "***"
+            echo "Warning: please use 'svcadm enable $SCRIPT' instead"
+            echo "***"
+        fi
+
         # Make sure there is not already a node running
         node_down_check
 
@@ -65,8 +72,13 @@
             exit $ES
         fi
 
-        # Warn the user if ulimit is too low
-        check_ulimit
+        # Make sure we have access to enough file descriptors
+        ULIMIT_S=$(prctl -n process.max-file-descriptor -t basic -P $$ | awk '/max-file-descriptor/ { print $3 }')
+        ULIMIT_H=$(prctl -n process.max-file-descriptor -t priv -P $$ | awk '/max-file-descriptor/ { print $3 }')
+        if [ ${ULIMIT_S} -lt ${ULIMIT_H} ]; then
+            echo "Trying to raise the file descriptor limit to maximum allowed."
+            prctl -n process.max-file-descriptor -t basic -v ${ULIMIT_H} $$ || true
+        fi
 
         # Make sure log directory exists
         mkdir -p $RUNNER_LOG_DIR
@@ -114,9 +126,16 @@
         ;;
 
     stop)
+
         # Bootstrap daemon command (check perms & drop to $RUNNER_USER)
         bootstrapd $@
 
+        if [ "${SMF_METHOD}" != "stop" ]; then
+            echo "***"
+            echo "Warning: please use 'svcadm disable $SCRIPT' instead"
+            echo "***"
+        fi
+
         get_pid
         ES=$?
         if [ "$ES" -ne 0 ] || [ -z $PID ]; then
@@ -223,8 +242,13 @@
             exit $ES
         fi
 
-        # Warn the user if ulimit -n is less than the defined threshold
-        check_ulimit
+        # Make sure we have access to enough file descriptors
+        ULIMIT_S=$(prctl -n process.max-file-descriptor -t basic -P $$ | awk '/max-file-descriptor/ { print $3 }')
+        ULIMIT_H=$(prctl -n process.max-file-descriptor -t priv -P $$ | awk '/max-file-descriptor/ { print $3 }')
+        if [ ${ULIMIT_S} -lt ${ULIMIT_H} ]; then
+            echo "Trying to raise the file descriptor limit to maximum allowed."
+            prctl -n process.max-file-descriptor -t basic -v ${ULIMIT_H} $$ || true
+        fi
 
         # Make sure log directory exists
         mkdir -p $RUNNER_LOG_DIR
